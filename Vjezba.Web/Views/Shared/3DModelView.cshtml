<!DOCTYPE html>
<html>
<head>
    <meta charset=UTF-8 />
   @* <link rel="stylesheet" type="text/css" href="styles.css" />*@
</head>
<body>
    <script src="~/js/three.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/104/three.js"></script>
        <script src="~/js/GLTFLoader.js"></script>
        <script src="~/js/OrbitControls.js"></script>
        <script src="~/js/OBJLoader.js"></script>
        <script src="~/js/draco_decoder.js"></script>

    <script>console.clear();</script>
    <script src="https://unpkg.com/three@0.87.1/build/three.js"></script>
    <script src="https://unpkg.com/three@0.87.1/examples/js/controls/OrbitControls.js"></script>
    <script src="https://unpkg.com/three@0.87.1/examples/js/loaders/GLTFLoader.js"></script>

    <canvas id="c"></canvas>

    <script>
        //var objLoader = new THREE.OBJLoader();
        //var material = new THREE.MeshBasicMaterial({ color: 'yellow', side: THREE.DoubleSide });
        //objLoader.load('3DModels/Test.obj', function (obj) {
        //    obj.traverse(function (child) {

        //        if (child instanceof THREE.Mesh) {
        //            child.material = material;
        //        }

        //    });
        //    scene.add(obj);
        //});

        // instantiate a loader
        const loader = new THREE.OBJLoader();

        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);

        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        const geometry = new THREE.BoxGeometry();
        const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
        const cube = new THREE.Mesh(geometry, material);
        scene.add(cube);

        camera.position.z = 5;

        const animate = function () {
            requestAnimationFrame(animate);

            cube.rotation.x += 0.01;
            cube.rotation.y += 0.01;

            renderer.render(scene, camera);
        };

        animate();

        // load a resource
        loader.load(
            // resource URL
            '3DModels/Test.obj',
            // called when resource is loaded

            function (object) {

                scene.add(object);

            },
            // called when loading is in progresses
            function (xhr) {

                console.log((xhr.loaded / xhr.total * 100) + '% loaded');

            },
            // called when loading has errors
            function (error) {

                console.log('An error happened');

            }
        );

        //const backgroundColor = 0x000000;

        ///*////////////////////////////////////////*/

        //var renderCalls = [];
        //function render() {
        //    requestAnimationFrame(render);
        //    renderCalls.forEach((callback) => {
        //        callback();
        //    });
        //}
        //render();

        ///*////////////////////////////////////////*/

        //var scene = new THREE.Scene();

        //var camera = new THREE.PerspectiveCamera(
        //    80,
        //    window.innerWidth / window.innerHeight,
        //    0.1,
        //    800
        //);
        //camera.position.set(5, 5, 5);

        //var renderer = new THREE.WebGLRenderer({ antialias: true });
        //renderer.setPixelRatio(window.devicePixelRatio);
        //renderer.setSize(window.innerWidth, window.innerHeight);
        //renderer.setClearColor(backgroundColor); //0x );

        //renderer.toneMapping = THREE.LinearToneMapping;
        //renderer.toneMappingExposure = Math.pow(0.94, 5.0);
        //renderer.shadowMap.enabled = true;
        //renderer.shadowMap.type = THREE.PCFShadowMap;

        //window.addEventListener(
        //    "resize",
        //    function () {
        //        camera.aspect = window.innerWidth / window.innerHeight;
        //        camera.updateProjectionMatrix();
        //        renderer.setSize(window.innerWidth, window.innerHeight);
        //    },
        //    false
        //);

        //document.body.appendChild(renderer.domElement);

        //function renderScene() {
        //    renderer.render(scene, camera);
        //}
        //renderCalls.push(renderScene);

        ///* ////////////////////////////////////////////////////////////////////////// */

        //var controls = new THREE.OrbitControls(camera);

        //controls.rotateSpeed = 0.3;
        //controls.zoomSpeed = 0.9;

        //controls.minDistance = 3;
        //controls.maxDistance = 20;

        //controls.minPolarAngle = 0; // radians
        //controls.maxPolarAngle = Math.PI / 2; // radians

        //controls.enableDamping = true;
        //controls.dampingFactor = 0.05;

        //renderCalls.push(function () {
        //    controls.update();
        //});

        ///* ////////////////////////////////////////////////////////////////////////// */

        //var light = new THREE.PointLight(0xffffcc, 20, 200);
        //light.position.set(4, 30, -20);
        //scene.add(light);

        //var light2 = new THREE.AmbientLight(0x20202a, 20, 100);
        //light2.position.set(30, -10, 30);
        //scene.add(light2);

        ///* ////////////////////////////////////////////////////////////////////////// */

        //var loader = new THREE.GLTFLoader();
        //loader.crossOrigin = true;
        //loader.load(
        //    "~/3D_Models/s", //https://s3-us-west-2.amazonaws.com/s.cdpn.io/39255/ladybug.gltf
        //    function (data) {
        //        var object = data.scene;
        //        object.position.set(0, -10, -0.75);
        //        //     object.rotation.set(Math.PI / -2, 0, 0);

        //        //     TweenLite.from( object.rotation, 1.3, {
        //        //       y: Math.PI * 2,
        //        //       ease: 'Power3.easeOut'
        //        //     });

        //        //TweenMax.from(object.position, 3, {
        //        //    y: -8,
        //        //    yoyo: true,
        //        //    repeat: -1,
        //        //    ease: "Power2.easeInOut"
        //        //});
        //        //object.position.y = - 95;
        //        scene.add(object);
        //        //, onProgress, onError );
        //    }
        //);


    </script>

</body>
</html>
